/*
 * This file was generated by the Gradle 'init' task.
 */
plugins {
    id 'java-library'
    id 'maven-publish'
    id 'signing'
    id "org.jreleaser"
}


java {
    withJavadocJar()
    withSourcesJar()
}

//task sourcesJar(type: Jar) {
//    from sourceSets.main.allSource
//    // your custom logic here
//    archiveClassifier.set('sources')
//}
//
//task javadocJar(type: Jar) {
//    from javadoc
//    // your custom logic here
//    archiveClassifier.set('javadoc')
//}
//
//artifacts {
//    archives sourcesJar
//    archives javadocJar
//}

tasks.withType(Jar) { task ->
    task.doLast {
        ant.checksum algorithm: 'md5', file: it.archivePath
        ant.checksum algorithm: 'sha1', file: it.archivePath
    }
}
//java.sourceCompatibility = JavaVersion.VERSION_1_8

jreleaser {
    project {
        copyright = 'entframework.net'
        description = 'Mybatis Generator Tool using entframework'
    }
    signing {
        active = 'ALWAYS'
        armored = true
        mode = 'FILE'
        publicKey = "${rootProject.projectDir}/public.key"
        secretKey = "${rootProject.projectDir}/private.key"
    }
    deploy {
        maven {
            mavenCentral {
                sonatype {
                    active = 'ALWAYS'
                    url = 'https://central.sonatype.com/api/v1/publisher'
                    username = ossrhUsername
                    password = ossrhPassword
                    stagingRepository('build/pre-deploy')
                }
            }
        }
    }
}

publishing {
    publications {
        mavenJava(MavenPublication) {
            from(components.java)

            versionMapping {
                usage('java-api') {
                    fromResolutionOf('runtimeClasspath')
                }
                usage('java-runtime') {
                    fromResolutionResult()
                }
            }
            pom {
                name = 'Mybatis Generator Tool'
                description = 'Mybatis Generator Tool using entframework'
                url = 'http://entframework.net'
                //properties = []
                licenses {
                    license {
                        name = 'The Apache License, Version 2.0'
                        url = 'http://www.apache.org/licenses/LICENSE-2.0.txt'
                    }
                }
                developers {
                    developer {
                        id = 'dancewing'
                        name = 'Jeff Qian'
                        email = 'qbaojian@163.com'
                    }
                }
                scm {
                    connection = 'scm:git:git://github.com/ent-framework/ent-mybatis-generator.git'
                    developerConnection = 'scm:git:ssh://github.com/ent-framework/ent-mybatis-generator.git'
                    url = 'https://github.com/ent-framework/ent-mybatis-generator'
                }
            }
        }
    }
//    repositories {
//        if (project.hasProperty('deployToAliyun')) {
//            def host = project.version.endsWith( '-SNAPSHOT' )?  mavenSnapshotRepository : mavenReleaseRepository
//            maven {
//                allowInsecureProtocol = !host.startsWith('https')
//                //指定要上传的maven私服仓库
//                url = host
//                //认证用户和密码
//                credentials {
//                    username = mavenDeployUser
//                    password = mavenDeployPassword
//                }
//            }
//        } else {
//            def host = project.version.endsWith( '-SNAPSHOT' )? 'https://ossrh-staging-api.central.sonatype.com/content/repositories/snapshots/' : 'https://ossrh-staging-api.central.sonatype.com/service/local/staging/deploy/maven2/'
//            maven {
//                allowInsecureProtocol = !host.startsWith('https')
//                //指定要上传的maven私服仓库
//                url = host
//                //认证用户和密码
//                credentials {
//                    username = ossrhUsername
//                    password = ossrhPassword
//                }
//            }
//        }
//    }
    repositories {
        maven {
            name = "LocalMavenWithChecksums"
            url = uri(layout.buildDirectory.dir("staging-deploy"))
        }
        maven {
            name = "PreDeploy"
            url = uri(layout.buildDirectory.dir("pre-deploy"))
        }
    }
}
signing {
    setRequired {
        gradle.taskGraph.allTasks.any { it.name.contains("LocalMavenWithChecksums") }
    }
    sign publishing.publications.mavenJava
}